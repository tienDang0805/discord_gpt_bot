const { getWeatherDescription } = require('../services/weather');
const GptChatService = require('../services/gptChatService');
const ImageGenerationService = require('../services/imageGenerationService');
const { sendLongMessage } = require('../utils/messageHelper');
const TextToAudioService = require('../services/textToAudioService');
const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, InteractionType } = require('discord.js');


module.exports = async (interaction) => {
    if (!interaction.isChatInputCommand() && !interaction.isButton() && !interaction.isModalSubmit()) return;

    const imageGenService = new ImageGenerationService();
    const textToAudioService = new TextToAudioService();
    const quizService = interaction.client.quizService; // Truy c·∫≠p QuizService t·ª´ client

    if (interaction.isChatInputCommand()) {
        if (interaction.commandName === 'thoitiet') {
            await interaction.deferReply();
            const weather = await getWeatherDescription();
            await sendLongMessage(
                interaction.editReply.bind(interaction), 
                weather
            );
        }
        
        if (interaction.commandName === 'tool') {
            await interaction.deferReply();
            
            try {
                const searchQuery = interaction.options.getString('query');
                
                if (!searchQuery) {
                    return await interaction.editReply('Vui l√≤ng cung c·∫•p t·ª´ kh√≥a t√¨m ki·∫øm!');
                }

                const result = await GptChatService.chatWithSearch(
                    interaction.user.id,
                    interaction.id,
                    searchQuery
                );

                if (result.success) {
                    await sendLongMessage(
                        interaction.editReply.bind(interaction),
                        result.response
                    );
                } else {
                    await interaction.editReply(`L·ªói: ${result.error}`);
                }
            } catch (error) {
                console.error('Search Error:', error);
                await interaction.editReply('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán t√¨m ki·∫øm');
            }
        }

        if (interaction.commandName === 'genimage') {
            await interaction.deferReply();
            
            try {
                const prompt = interaction.options.getString('prompt');
                const style = interaction.options.getString('style');
                
                if (!prompt) {
                    return await interaction.editReply('Vui l√≤ng cung c·∫•p m√¥ t·∫£ ƒë·ªÉ t·∫°o ·∫£nh!');
                }

                // Th√™m style v√†o prompt n·∫øu c√≥
                const fullPrompt = style 
                    ? `${prompt}, ${style} style, high quality, 4k`
                    : prompt;

                console.log(`[GenImage] ƒêang t·∫°o ·∫£nh v·ªõi prompt: "${fullPrompt}"`);
                
                const result = await imageGenService.generateImage(fullPrompt);

                if (result.success) {
                    console.log(`[GenImage] T·∫°o ·∫£nh th√†nh c√¥ng, k√≠ch th∆∞·ªõc: ${result.imageBuffer.length} bytes`);
                    
                    await interaction.editReply({
                        content: result.textResponse || `·∫¢nh ƒë∆∞·ª£c t·∫°o t·ª´: "${prompt}"`,
                        files: [{
                            attachment: result.imageBuffer,
                            name: 'generated-image.png'
                        }]
                    });
                } else {
                    console.error('[GenImage] L·ªói khi t·∫°o ·∫£nh:', result.error);
                    await interaction.editReply({
                        content: `‚ùå L·ªói khi t·∫°o ·∫£nh: ${result.error || 'Kh√¥ng x√°c ƒë·ªãnh'}`
                    });
                }
            } catch (error) {
                console.error('[GenImage] L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c:', {
                    error: error.message,
                    stack: error.stack,
                    interaction: {
                        user: interaction.user.tag,
                        options: interaction.options.data
                    }
                });
                await interaction.editReply('‚ùå Bot g·∫∑p l·ªói nghi√™m tr·ªçng khi t·∫°o ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau!');
            }
        }

        if (interaction.commandName === 'speak') {
            await interaction.deferReply();
            
            try {
                const prompt = interaction.options.getString('prompt');
                if (!prompt) {
                    return await interaction.editReply('Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn chuy·ªÉn th√†nh audio!');
                }

                console.log(`[Speak] ƒêang t·∫°o audio cho: "${prompt}"`);
                const { text, filePath } = await GptChatService.generateAudioWithContext(prompt); // S·ª≠ d·ª•ng GptChatService
                
                await interaction.editReply({
                    content: `N·ªôi dung: ${text}`,
                    files: [{
                        attachment: filePath, // ƒê∆∞·ªùng d·∫´n file ƒë√£ l∆∞u
                        name: 'audio-response.wav' // ƒê·ªïi t√™n file cho ƒë√∫ng ƒë·ªãnh d·∫°ng
                    }]
                });
                console.log('[Speak] ƒê√£ g·ª≠i audio th√†nh c√¥ng');

            } catch (error) {
                console.error('[Speak] L·ªói:', error);
                await interaction.editReply({
                    content: `‚ùå L·ªói khi t·∫°o audio: ${error.message}`,
                    ephemeral: true
                });
            }
        }

        // Music commands
        if (interaction.commandName === 'play') {
            await interaction.deferReply();
            
            try {
                const { musicService } = interaction.client;
                const voiceChannel = interaction.member?.voice?.channel;
                const url = interaction.options.getString('url');
                    console.log("[DEBUG] URL ng∆∞·ªùi d√πng nh·∫≠p:", url); // üëà log ra URL

                if (!voiceChannel) {
                    return await interaction.editReply("‚ùå B·∫°n c·∫ßn v√†o voice channel tr∆∞·ªõc!");
                }

                if (!musicService?.play) {
                    console.error("[CRITICAL] MusicService.play kh√¥ng t·ªìn t·∫°i!");
                    return await interaction.editReply("‚ùå Bot ƒëang g·∫∑p l·ªói h·ªá th·ªëng!");
                }

                const result = await musicService.play(voiceChannel, url, {
                    requestedBy: interaction.user.tag
                });

                await interaction.editReply(result.message || "üéµ ƒêang ph√°t nh·∫°c...");
            } catch (error) {
                console.error("[ERROR] /play failed:", error);
                await interaction.editReply(`‚ùå L·ªói: ${error.message}`);
            }
        }

        if (interaction.commandName === 'skip') {
            await interaction.deferReply();
            
            try {
                const { musicService } = interaction.client;
                const guildId = interaction.guild.id;
                
                if (!musicService?.skip) {
                    console.error("[CRITICAL] MusicService.skip kh√¥ng t·ªìn t·∫°i!");
                    return await interaction.editReply("‚ùå Bot ƒëang g·∫∑p l·ªói h·ªá th·ªëng!");
                }

                const result = await musicService.skip(guildId);
                await interaction.editReply(result.message);
            } catch (error) {
                console.error('Skip Error:', error);
                await interaction.editReply(`‚ùå Error: ${error.message}`);
            }
        }

        if (interaction.commandName === 'stop') {
            await interaction.deferReply();
            
            try {
                const { musicService } = interaction.client;
                const guildId = interaction.guild.id;
                
                if (!musicService?.stop) {
                    console.error("[CRITICAL] MusicService.stop kh√¥ng t·ªìn t·∫°i!");
                    return await interaction.editReply("‚ùå Bot ƒëang g·∫∑p l·ªói h·ªá th·ªëng!");
                }

                const result = await musicService.stop(guildId);
                await interaction.editReply(result.message);
            } catch (error) {
                console.error('Stop Error:', error);
                await interaction.editReply(`‚ùå Error: ${error.message}`);
            }
        }

        if (interaction.commandName === 'pause') {
            await interaction.deferReply();
            
            try {
                const { musicService } = interaction.client;
                const guildId = interaction.guild.id;
                
                if (!musicService?.pause) {
                    console.error("[CRITICAL] MusicService.pause kh√¥ng t·ªìn t·∫°i!");
                    return await interaction.editReply("‚ùå Bot ƒëang g·∫∑p l·ªói h·ªá th·ªëng!");
                }

                const result = await musicService.pause(guildId);
                await interaction.editReply(result.message);
            } catch (error) {
                console.error('Pause Error:', error);
                await interaction.editReply(`‚ùå Error: ${error.message}`);
            }
        }

        if (interaction.commandName === 'resume') {
            await interaction.deferReply();
            
            try {
                const { musicService } = interaction.client;
                const guildId = interaction.guild.id;
                
                if (!musicService?.resume) {
                    console.error("[CRITICAL] MusicService.resume kh√¥ng t·ªìn t·∫°i!");
                    return await interaction.editReply("‚ùå Bot ƒëang g·∫∑p l·ªói h·ªá th·ªëng!");
                }

                const result = await musicService.resume(guildId);
                await interaction.editReply(result.message);
            } catch (error) {
                console.error('Resume Error:', error);
                await interaction.editReply(`‚ùå Error: ${error.message}`);
            }
        }

        if (interaction.commandName === 'queue') {
            await interaction.deferReply();
            
            try {
                const { musicService } = interaction.client;
                const guildId = interaction.guild.id;
                
                if (!musicService?.getQueue) {
                    console.error("[CRITICAL] MusicService.getQueue kh√¥ng t·ªìn t·∫°i!");
                    return await interaction.editReply("‚ùå Bot ƒëang g·∫∑p l·ªói h·ªá th·ªëng!");
                }

                const { current, queue, repeatMode } = await musicService.getQueue(guildId);
                
                let message = `üîÅ Ch·∫ø ƒë·ªô l·∫∑p: ${repeatMode}\n`;
                
                if (current) {
                    message += `üé∂ ƒêang ph√°t: **${current.title}** (Y√™u c·∫ßu b·ªüi: ${current.requestedBy})\n\n`;
                } else {
                    message += "üîá Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t\n\n";
                }
                
                if (queue.length > 0) {
                    message += "üìÉ Danh s√°ch ch·ªù:\n" + 
                        queue.map((track, index) => 
                            `${index + 1}. **${track.title}** (Y√™u c·∫ßu b·ªüi: ${track.requestedBy})`
                        ).join('\n');
                } else {
                    message += "üì≠ Danh s√°ch ch·ªù tr·ªëng";
                }
                
                await interaction.editReply(message);
            } catch (error) {
                console.error('Queue Error:', error);
                await interaction.editReply(`‚ùå Error: ${error.message}`);
            }
        }

        if (interaction.commandName === 'volume') {
            await interaction.deferReply();
            
            try {
                const { musicService } = interaction.client;
                const guildId = interaction.guild.id;
                const volume = interaction.options.getInteger('volume');
                
                if (!musicService?.setVolume) {
                    console.error("[CRITICAL] MusicService.setVolume kh√¥ng t·ªìn t·∫°i!");
                    return await interaction.editReply("‚ùå Bot ƒëang g·∫∑p l·ªói h·ªá th·ªëng!");
                }

                if (volume === null || volume < 0 || volume > 100) {
                    return await interaction.editReply("‚ùå Volume ph·∫£i t·ª´ 0 ƒë·∫øn 100!");
                }

                const result = await musicService.setVolume(guildId, volume);
                await interaction.editReply(result.message);
            } catch (error) {
                console.error('Volume Error:', error);
                await interaction.editReply(`‚ùå Error: ${error.message}`);
            }
        }

        if (interaction.commandName === 'repeat') {
            await interaction.deferReply();
            
            try {
                const { musicService } = interaction.client;
                const guildId = interaction.guild.id;
                const mode = interaction.options.getString('mode');
                
                if (!musicService?.setRepeatMode) {
                    console.error("[CRITICAL] MusicService.setRepeatMode kh√¥ng t·ªìn t·∫°i!");
                    return await interaction.editReply("‚ùå Bot ƒëang g·∫∑p l·ªói h·ªá th·ªëng!");
                }

                const result = await musicService.setRepeatMode(guildId, mode);
                await interaction.editReply(result.message);
            } catch (error) {
                console.error('Repeat Error:', error);
                await interaction.editReply(`‚ùå Error: ${error.message}`);
            }
        }
        if (interaction.commandName === 'setting') {
            const subcommand = interaction.options.getSubcommand();

            if (subcommand === 'edit') {
                try {
                    const config = await GptChatService.getBotConfig();
                    const modal = new ModalBuilder()
                        .setCustomId('personality_modal_v2') // ƒê·ªïi ID ƒë·ªÉ tr√°nh xung ƒë·ªôt
                        .setTitle('B·∫£ng ƒêi·ªÅu Khi·ªÉn Nh√¢n C√°ch AI');

                    // T·∫†O C√ÅC √î NH·∫¨P LI·ªÜU M·ªöI
                    const identityInput = new TextInputBuilder().setCustomId('identity_input').setLabel("Danh t√≠nh (Bot l√† ai?)").setStyle(TextInputStyle.Paragraph).setValue(config.identity);
                    const purposeInput = new TextInputBuilder().setCustomId('purpose_input').setLabel("M·ª•c ƒë√≠ch (Bot l√†m g√¨?)").setStyle(TextInputStyle.Paragraph).setValue(config.purpose);
                    const hobbiesInput = new TextInputBuilder().setCustomId('hobbies_input').setLabel("S·ªü th√≠ch (Bot th√≠ch g√¨?)").setStyle(TextInputStyle.Paragraph).setValue(config.hobbies);
                    const personalityInput = new TextInputBuilder().setCustomId('personality_input').setLabel("T√≠nh c√°ch (H√†nh vi)").setStyle(TextInputStyle.Paragraph).setValue(config.personality);
                    const styleInput = new TextInputBuilder().setCustomId('style_input').setLabel("Gi·ªçng vƒÉn (C√°ch n√≥i chuy·ªán)").setStyle(TextInputStyle.Paragraph).setValue(config.writing_style);
                    
                    // Modal ch·ªâ cho ph√©p 5 ActionRow
                    modal.addComponents(
                        new ActionRowBuilder().addComponents(identityInput),
                        new ActionRowBuilder().addComponents(purposeInput),
                        new ActionRowBuilder().addComponents(hobbiesInput),
                        new ActionRowBuilder().addComponents(personalityInput),
                        new ActionRowBuilder().addComponents(styleInput)
                    );
                    
                    await interaction.showModal(modal);
                } catch (error) { /* ... x·ª≠ l√Ω l·ªói ... */ }

            } else if (subcommand === 'view') {
                await interaction.deferReply(); // C√¥ng khai
                const config = await GptChatService.getBotConfig();
                
                const embed = new EmbedBuilder()
                    .setColor(0x3d85c6)
                    .setTitle('üëÄ Nh√¢n c√°ch hi·ªán t·∫°i c·ªßa AI')
                    .setDescription(`Y√™u c·∫ßu b·ªüi: ${interaction.user}`)
                    .addFields(
                        { name: 'üìú Danh t√≠nh', value: `\`\`\`${config.identity}\`\`\`` },
                        { name: 'üéØ M·ª•c ƒë√≠ch', value: `\`\`\`${config.purpose}\`\`\`` },
                        { name: 'üé® S·ªü th√≠ch', value: `\`\`\`${config.hobbies}\`\`\`` },
                        { name: 'üë§ T√≠nh c√°ch', value: `\`\`\`${config.personality}\`\`\`` },
                        { name: '‚úçÔ∏è Gi·ªçng vƒÉn', value: `\`\`\`${config.writing_style}\`\`\`` }
                    )
                    .setTimestamp();
                    
                await interaction.editReply({ embeds: [embed] });

            } else if (subcommand === 'reset') {
                await interaction.deferReply();
                await GptChatService.resetBotConfig();
                
                const embed = new EmbedBuilder()
                    .setColor(0xFFA500)
                    .setTitle('üîÑ Nh√¢n c√°ch AI ƒë√£ ƒë∆∞·ª£c reset!')
                    .setDescription(`Ng∆∞·ªùi th·ª±c hi·ªán: ${interaction.user}\n\nƒê√£ quay v·ªÅ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh v√† x√≥a s·∫°ch b·ªô nh·ªõ.`)
                    .setTimestamp();

                await interaction.editReply({ embeds: [embed] });
            }
        }
        // START: X·ª≠ l√Ω l·ªánh Quiz
        if (interaction.commandName === 'quiz') {
            if (quizService.isQuizActive(interaction.guild.id)) {
                return await interaction.reply({ content: '‚ùå Hi·ªán ƒëang c√≥ m·ªôt tr√≤ ƒë·ªë vui ƒëang di·ªÖn ra. Vui l√≤ng ƒë·ª£i ho·∫∑c d√πng `/quizcancel` ƒë·ªÉ h·ªßy b·ªè.', ephemeral: true });
            }

            const modal = new ModalBuilder()
                .setCustomId('quiz_setup_modal')
                .setTitle('Thi·∫øt L·∫≠p Racoon Quiz');

            const numQuestionsInput = new TextInputBuilder()
                .setCustomId('num_questions_input')
                .setLabel('S·ªë l∆∞·ª£ng c√¢u h·ªèi (3-10)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('V√≠ d·ª•: 5')
                .setRequired(true);

            const topicInput = new TextInputBuilder()
                .setCustomId('topic_input')
                .setLabel('Ch·ªß ƒë·ªÅ c√¢u h·ªèi')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('V√≠ d·ª•: L·ªãch s·ª≠ Vi·ªát Nam, Khoa h·ªçc, Phim ·∫£nh')
                .setRequired(true);
            
            // Th√™m tr∆∞·ªùng nh·∫≠p th·ªùi gian
            const timeLimitInput = new TextInputBuilder()
                .setCustomId('time_limit_input')
                .setLabel('Th·ªùi gian cho m·ªói c√¢u (gi√¢y)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('M·∫∑c ƒë·ªãnh: 15')
                .setRequired(false); // Kh√¥ng b·∫Øt bu·ªôc, s·∫Ω d√πng default n·∫øu tr·ªëng

            // Th√™m tr∆∞·ªùng ch·ªçn ƒë·ªô kh√≥
            const difficultyInput = new TextInputBuilder()
                .setCustomId('difficulty_input')
                .setLabel('ƒê·ªô kh√≥ (D·ªÖ, Trung b√¨nh, Kh√≥, ƒê·ªãa ng·ª•c)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('V√≠ d·ª•: Trung b√¨nh')
                .setRequired(false); // Kh√¥ng b·∫Øt bu·ªôc, s·∫Ω d√πng default n·∫øu tr·ªëng

            modal.addComponents(
                new ActionRowBuilder().addComponents(numQuestionsInput),
                new ActionRowBuilder().addComponents(topicInput),
                new ActionRowBuilder().addComponents(timeLimitInput),
                new ActionRowBuilder().addComponents(difficultyInput) // Th√™m input ƒë·ªô kh√≥
            );

            await interaction.showModal(modal);
        }

        if (interaction.commandName === 'quizcancel') {
            await interaction.deferReply({ ephemeral: true });
            const guildId = interaction.guild.id;
            const userId = interaction.user.id;

            const result = await quizService.cancelQuiz(guildId, userId);
            await interaction.editReply({ content: result.message, ephemeral: true });
        }
        // END: X·ª≠ l√Ω l·ªánh Quiz
        return;
    }

    // 2. X·ª≠ l√Ω Submit Modal (gi·ªØ nguy√™n)
    if (interaction.type === InteractionType.ModalSubmit) {
        if (interaction.customId === 'personality_modal_v2') {
            try {
                await interaction.deferReply({ ephemeral: true });

                const newConfigData = {
                    identity: interaction.fields.getTextInputValue('identity_input'),
                    purpose: interaction.fields.getTextInputValue('purpose_input'),
                    hobbies: interaction.fields.getTextInputValue('hobbies_input'),
                    personality: interaction.fields.getTextInputValue('personality_input'),
                    writing_style: interaction.fields.getTextInputValue('style_input'),
                };

                await GptChatService.updateBotConfig(newConfigData);

                const clearHistoryButton = new ButtonBuilder()
                    .setCustomId('confirm_clear_history_v2') // Th√™m v2 ƒë·ªÉ tr√°nh xung ƒë·ªôt id c≈© n·∫øu c√≥
                    .setLabel('X√≥a lu√¥n l·ªãch s·ª≠ chat')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üóëÔ∏è');

                const keepHistoryButton = new ButtonBuilder()
                    .setCustomId('keep_history_v2')
                    .setLabel('Gi·ªØ l·∫°i l·ªãch s·ª≠')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üíæ');

                const row = new ActionRowBuilder().addComponents(clearHistoryButton, keepHistoryButton);
                
                const embed = new EmbedBuilder()
                    .setColor(0x57F287)
                    .setTitle('‚úÖ C·∫≠p nh·∫≠t nh√¢n c√°ch th√†nh c√¥ng!')
                    .setDescription(`Nh√¢n c√°ch m·ªõi c·ªßa AI ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng ngay l·∫≠p t·ª©c.\n*Th·ª±c hi·ªán b·ªüi: ${interaction.user}*`)
                    .addFields({
                        name: 'ü§î B·∫°n c√≥ mu·ªën x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán kh√¥ng?',
                        value: 'Vi·ªác n√†y s·∫Ω gi√∫p AI "nh·∫≠p vai" nh√¢n c√°ch m·ªõi t·ªët h∆°n.'
                    })
                    .setTimestamp();

                await interaction.editReply({
                    embeds: [embed],
                    components: [row],
                    ephemeral: true
                });

            } catch (error) {
                console.error("L·ªói khi x·ª≠ l√Ω modal personality:", error);
                await interaction.editReply({ content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi l∆∞u c·∫•u h√¨nh.', ephemeral: true });
            }
        }
        // START: X·ª≠ l√Ω submit modal Quiz
        if (interaction.customId === 'quiz_setup_modal') {
            await interaction.deferReply(); // Defer reply c√¥ng khai
            const numQuestions = parseInt(interaction.fields.getTextInputValue('num_questions_input'));
            const topic = interaction.fields.getTextInputValue('topic_input');
            const timeLimitInput = interaction.fields.getTextInputValue('time_limit_input'); // L·∫•y th·ªùi gian nh·∫≠p v√†o
            const timeLimit = timeLimitInput ? parseInt(timeLimitInput) : 15; // M·∫∑c ƒë·ªãnh 15 gi√¢y
            const difficultyInput = interaction.fields.getTextInputValue('difficulty_input'); // L·∫•y ƒë·ªô kh√≥
            const difficulty = difficultyInput ? difficultyInput.trim() : 'Trung b√¨nh'; // M·∫∑c ƒë·ªãnh Trung b√¨nh

            const guildId = interaction.guild.id;
            const channelId = interaction.channel.id;
            const creatorId = interaction.user.id;

            if (isNaN(numQuestions) || numQuestions < 3 || numQuestions > 10) {
                return await interaction.editReply('‚ùå S·ªë l∆∞·ª£ng c√¢u h·ªèi ph·∫£i l√† m·ªôt s·ªë t·ª´ 3 ƒë·∫øn 10.');
            }
            if (isNaN(timeLimit) || timeLimit < 5 || timeLimit > 60) { // Gi·ªõi h·∫°n th·ªùi gian t·ª´ 5-60 gi√¢y
                return await interaction.editReply('‚ùå Th·ªùi gian cho m·ªói c√¢u ph·∫£i l√† m·ªôt s·ªë t·ª´ 5 ƒë·∫øn 60 gi√¢y.');
            }

            // Validate difficulty input
            const validDifficulties = ['D·ªÖ', 'Trung b√¨nh', 'Kh√≥', 'ƒê·ªãa ng·ª•c'];
            if (!validDifficulties.includes(difficulty)) {
                return await interaction.editReply('‚ùå ƒê·ªô kh√≥ kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn: D·ªÖ, Trung b√¨nh, Kh√≥, ho·∫∑c ƒê·ªãa ng·ª•c.');
            }

            try {
                const result = await quizService.startQuiz(guildId, channelId, creatorId, numQuestions, topic, timeLimit, difficulty); // Truy·ªÅn timeLimit v√† difficulty
                if (result.success) {
                    await interaction.editReply(result.message); // Th√¥ng b√°o quiz b·∫Øt ƒë·∫ßu
                    // C√¢u h·ªèi ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c g·ª≠i b·ªüi quizService
                } else {
                    await interaction.editReply(`‚ùå L·ªói: ${result.message}`);
                }
            } catch (error) {
                console.error('L·ªói khi b·∫Øt ƒë·∫ßu quiz:', error);
                await interaction.editReply('‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o quiz. Vui l√≤ng th·ª≠ l·∫°i sau.');
            }
        }
        // END: X·ª≠ l√Ω submit modal Quiz
        return;
    }

    // 3. X·ª≠ l√Ω b·∫•m n√∫t (ƒê√É C·∫¨P NH·∫¨T LOGIC)
    if (interaction.isButton()) {
        // START: X·ª≠ l√Ω n√∫t b·∫•m Quiz
        if (interaction.customId.startsWith('quiz_answer_')) {
            await interaction.deferUpdate(); // Defer update ƒë·ªÉ tr√°nh l·ªói interaction failed
            const guildId = interaction.guild.id;
            const userId = interaction.user.id;
            const answerIndex = parseInt(interaction.customId.split('_')[2]);

            try {
                const result = await quizService.submitAnswer(guildId, userId, answerIndex);
                if (result.success) {
                    // Kh√¥ng c·∫ßn editReply ·ªü ƒë√¢y, quizService s·∫Ω g·ª≠i tin nh·∫Øn m·ªõi
                } else {
                    // N·∫øu c√≥ l·ªói, g·ª≠i tin nh·∫Øn ri√™ng t∆∞ cho ng∆∞·ªùi d√πng
                    await interaction.followUp({ content: `‚ùå ${result.message}`, ephemeral: true });
                }
            } catch (error) {
                console.error('L·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi quiz:', error);
                await interaction.followUp({ content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n.', ephemeral: true });
            }
            return; // Quan tr·ªçng: D·ª´ng l·∫°i sau khi x·ª≠ l√Ω n√∫t quiz
        }
        // END: X·ª≠ l√Ω n√∫t b·∫•m Quiz

        let historyCleared = false;
        let actionCompleted = false;

        // N√∫t x√°c nh·∫≠n x√≥a l·ªãch s·ª≠
        if (interaction.customId === 'confirm_clear_history_v2') {
            await interaction.deferUpdate(); // B√°o cho Discord bi·∫øt m√¨nh ƒë√£ nh·∫≠n n√∫t b·∫•m
            try {
                await GptChatService.clearHistory();
                historyCleared = true;
                actionCompleted = true;
            } catch (error) {
                console.error('L·ªói khi x√≥a history:', error);
                await interaction.followUp({ content: 'C√≥ l·ªói khi x√≥a l·ªãch s·ª≠.', ephemeral: true });
                return; // D·ª´ng l·∫°i n·∫øu l·ªói
            }
        }

        // N√∫t gi·ªØ l·∫°i l·ªãch s·ª≠
        if (interaction.customId === 'keep_history_v2') {
            await interaction.deferUpdate();
            historyCleared = false;
            actionCompleted = true;
        }

        // N·∫øu m·ªôt trong hai h√†nh ƒë·ªông tr√™n ƒë√£ ho√†n t·∫•t
        if (actionCompleted) {
            // L·∫•y config m·ªõi nh·∫•t ƒë·ªÉ hi·ªÉn th·ªã
            const updatedConfig = await GptChatService.getBotConfig();
            
            // X√¢y d·ª±ng m√¥ t·∫£ d·ª±a tr√™n h√†nh ƒë·ªông
            const description = historyCleared 
                ? `Ng∆∞·ªùi c·∫≠p nh·∫≠t: ${interaction.user}\n\n*B·ªô nh·ªõ c·ªßa bot **ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi** ƒë·ªÉ h·ªçc l·∫°i nh√¢n c√°ch m·ªõi.*`
                : `Ng∆∞·ªùi c·∫≠p nh·∫≠t: ${interaction.user}\n\n*L·ªãch s·ª≠ tr√≤ chuy·ªán **v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n**.*`;

            // T·∫°o embed c√¥ng khai cu·ªëi c√πng
            const publicEmbed = new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('‚úÖ Nh√¢n c√°ch AI ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!')
                .setDescription(description)
                .addFields(
                    { name: 'üìú Danh t√≠nh m·ªõi', value: `\`\`\`${updatedConfig.identity}\`\`\`` },
                    { name: 'üéØ M·ª•c ƒë√≠ch m·ªõi', value: `\`\`\`${updatedConfig.purpose}\`\`\`` },
                    { name: 'üé® S·ªü th√≠ch m·ªõi', value: `\`\`\`${updatedConfig.hobbies}\`\`\`` },
                    { name: 'üë§ T√≠nh c√°ch m·ªõi', value: `\`\`\`${updatedConfig.personality}\`\`\`` },
                    { name: '‚úçÔ∏è Gi·ªçng vƒÉn m·ªõi', value: `\`\`\`${updatedConfig.writing_style}\`\`\`` }
                )
                .setTimestamp();

            // G·ª≠i tin nh·∫Øn c√¥ng khai v√†o k√™nh m√† l·ªánh ƒë∆∞·ª£c g·ªçi
            await interaction.channel.send({ embeds: [publicEmbed] });

            // C·∫≠p nh·∫≠t l·∫°i tin nh·∫Øn ri√™ng t∆∞, b√°o l√† ƒë√£ xong v√† x√≥a c√°c n√∫t ƒëi
            const privateConfirmationEmbed = new EmbedBuilder()
                .setColor(historyCleared ? 0xFFA500 : 0x3d85c6)
                .setTitle(historyCleared ? 'üóëÔ∏è ƒê√£ x√≥a l·ªãch s·ª≠ th√†nh c√¥ng!' : 'üíæ ƒê√£ gi·ªØ l·∫°i l·ªãch s·ª≠.')
                .setDescription('M·ªôt th√¥ng b√°o c√¥ng khai ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o k√™nh chat.')
                .setTimestamp();
                
            await interaction.editReply({ embeds: [privateConfirmationEmbed], components: [] });
        }
    }
    
};
