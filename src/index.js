require('dotenv').config();

// Import c√°c dependencies
const { InteractionType, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const discordClient = require('./config/discordClient');
const readyHandler = require('./handlers/readyHandler');
const messageHandler = require('./handlers/messageHandler');
const interactionHandler = require('./handlers/interactionHandler');
const GptChatService = require('./services/gptChatService');
const QuizService = require('./services/quizService'); // TH√äM D√íNG N√ÄY

// G√°n QuizService v√†o client ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ c√°c handler
discordClient.quizService = QuizService;
// G√°n discordClient v√†o global ƒë·ªÉ QuizService c√≥ th·ªÉ fetch channel/user
global.discordClient = discordClient;

// ƒêƒÉng k√Ω c√°c event handlers
discordClient.once('ready', () => readyHandler(discordClient));
discordClient.on('messageCreate', messageHandler);

// ==========================================================
// C·∫¨P NH·∫¨T TR√åNH X·ª¨ L√ù INTERACTION
// ==========================================================
discordClient.on('interactionCreate', async (interaction) => {
    // 1. X·ª≠ l√Ω Slash Command (gi·ªØ nguy√™n)
    if (interaction.isChatInputCommand()) {
        interactionHandler(interaction);
        return;
    }

    // 2. X·ª≠ l√Ω Submit Modal (gi·ªØ nguy√™n)
    if (interaction.type === InteractionType.ModalSubmit) {
        if (interaction.customId === 'personality_modal_v2') {
            try {
                await interaction.deferReply({ ephemeral: true });

                const newConfigData = {
                    identity: interaction.fields.getTextInputValue('identity_input'),
                    purpose: interaction.fields.getTextInputValue('purpose_input'),
                    hobbies: interaction.fields.getTextInputValue('hobbies_input'),
                    personality: interaction.fields.getTextInputValue('personality_input'),
                    writing_style: interaction.fields.getTextInputValue('style_input'),
                };

                await GptChatService.updateBotConfig(newConfigData);

                const clearHistoryButton = new ButtonBuilder()
                    .setCustomId('confirm_clear_history_v2') // Th√™m v2 ƒë·ªÉ tr√°nh xung ƒë·ªôt id c≈© n·∫øu c√≥
                    .setLabel('X√≥a lu√¥n l·ªãch s·ª≠ chat')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üóëÔ∏è');

                const keepHistoryButton = new ButtonBuilder()
                    .setCustomId('keep_history_v2')
                    .setLabel('Gi·ªØ l·∫°i l·ªãch s·ª≠')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üíæ');

                const row = new ActionRowBuilder().addComponents(clearHistoryButton, keepHistoryButton);
                
                const embed = new EmbedBuilder()
                    .setColor(0x57F287)
                    .setTitle('‚úÖ C·∫≠p nh·∫≠t nh√¢n c√°ch th√†nh c√¥ng!')
                    .setDescription(`Nh√¢n c√°ch m·ªõi c·ªßa AI ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng ngay l·∫≠p t·ª©c.\n*Th·ª±c hi·ªán b·ªüi: ${interaction.user}*`)
                    .addFields({
                        name: 'ü§î B·∫°n c√≥ mu·ªën x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán kh√¥ng?',
                        value: 'Vi·ªác n√†y s·∫Ω gi√∫p AI "nh·∫≠p vai" nh√¢n c√°ch m·ªõi t·ªët h∆°n.'
                    })
                    .setTimestamp();

                await interaction.editReply({
                    embeds: [embed],
                    components: [row],
                    ephemeral: true
                });

            } catch (error) {
                console.error("L·ªói khi x·ª≠ l√Ω modal personality:", error);
                await interaction.editReply({ content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi l∆∞u c·∫•u h√¨nh.', ephemeral: true });
            }
        }
        // Chuy·ªÉn x·ª≠ l√Ω modal submit cho interactionHandler
        interactionHandler(interaction); // G·ªçi interactionHandler ƒë·ªÉ x·ª≠ l√Ω quiz_setup_modal
        return;
    }

    // 3. X·ª≠ l√Ω b·∫•m n√∫t (ƒê√É C·∫¨P NH·∫¨T LOGIC)
    if (interaction.isButton()) {
        // Chuy·ªÉn x·ª≠ l√Ω n√∫t b·∫•m cho interactionHandler
        interactionHandler(interaction); // G·ªçi interactionHandler ƒë·ªÉ x·ª≠ l√Ω quiz_answer_ v√† c√°c n√∫t kh√°c
        return;
    }
});

// ƒêƒÉng nh·∫≠p bot
discordClient.login(process.env.DISCORD_TOKEN);
