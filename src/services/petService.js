// src/services/petService.js

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');
const GptChatService = require('./gptChatService');
const { Pet, UserEggCooldown } = require('../model/petSchema');
const ImageGenerationService = require('./imageGenerationService');
const mongoose = require('mongoose'); // Th√™m d√≤ng n√†y v√†o ƒë·∫ßu petService.js

const ADMIN_IDS = ['448507913879945216','1376058136879955999'];
const MAX_PETS_PER_USER = 6;
const MAX_EGGS_PER_DAY = 5;

class PetService {
    constructor() {
        this.gptService = GptChatService;
        this.imageService = new ImageGenerationService();
        this.imageGenService = new ImageGenerationService();
        this.DEFAULT_QUESTION_TIME_LIMIT_MS = 15 * 1000;
    }

    /**
     * Ki·ªÉm tra xem user c√≥ th·ªÉ m·ªü tr·ª©ng kh√¥ng (gi·ªõi h·∫°n 5 l·∫ßn/ng√†y)
     */
    async canOpenEgg(userId) {
        if (ADMIN_IDS.includes(userId)) {
            return { canOpen: true, remaining: 999 };
        }

        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const cooldown = await UserEggCooldown.findOne({ userId });
        if (!cooldown) {
            return { canOpen: true, remaining: MAX_EGGS_PER_DAY };
        }

        const lastOpenDate = new Date(cooldown.lastEggOpenTime);
        lastOpenDate.setHours(0, 0, 0, 0);
        
        // Reset counter if it's a new day
        if (today.getTime() !== lastOpenDate.getTime()) {
            cooldown.dailyCount = 0;
            cooldown.lastEggOpenTime = new Date();
            await cooldown.save();
            return { canOpen: true, remaining: MAX_EGGS_PER_DAY };
        }

        const remaining = MAX_EGGS_PER_DAY - cooldown.dailyCount;
        return { 
            canOpen: remaining > 0,
            remaining: Math.max(0, remaining)
        };
    }

    /**
     * C·∫≠p nh·∫≠t s·ªë l·∫ßn m·ªü tr·ª©ng trong ng√†y
     */
    async updateEggCooldown(userId) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const cooldown = await UserEggCooldown.findOne({ userId });
        
        if (!cooldown) {
            await UserEggCooldown.create({
                userId,
                lastEggOpenTime: new Date(),
                dailyCount: 1
            });
        } else {
            const lastOpenDate = new Date(cooldown.lastEggOpenTime);
            lastOpenDate.setHours(0, 0, 0, 0);
            
            if (today.getTime() === lastOpenDate.getTime()) {
                cooldown.dailyCount += 1;
            } else {
                cooldown.dailyCount = 1;
            }
            cooldown.lastEggOpenTime = new Date();
            await cooldown.save();
        }
    }

    /**
     * B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch·ªçn tr·ª©ng cho ng∆∞·ªùi ch∆°i
     */
    async beginHatchingProcess(interaction) {
        const userId = interaction.user.id;
        console.log(`[PetService] B·∫Øt ƒë·∫ßu quy tr√¨nh ch·ªçn tr·ª©ng cho User ID: ${userId}`);

        try {
            // Ki·ªÉm tra s·ªë l∆∞·ª£ng pets hi·ªán t·∫°i
            const currentPets = await Pet.find({ ownerId: userId });
            if (currentPets.length >= MAX_PETS_PER_USER && !ADMIN_IDS.includes(userId)) {
                console.log(`[PetService] User ID: ${userId} ƒë√£ c√≥ ƒë·ªß ${MAX_PETS_PER_USER} pets.`);
                return interaction.editReply({ 
                    content: `‚ùå B·∫°n ƒë√£ c√≥ ƒë·ªß **${MAX_PETS_PER_USER} pets** r·ªìi! H√£y th·∫£ b·ªõt pet c≈© tr∆∞·ªõc khi m·ªü tr·ª©ng m·ªõi.`, 
                    ephemeral: true 
                });
            }

            // Ki·ªÉm tra s·ªë l·∫ßn m·ªü tr·ª©ng trong ng√†y
            const eggCheck = await this.canOpenEgg(userId);
            if (!eggCheck.canOpen) {
                return interaction.editReply({ 
                    content: `‚è∞ B·∫°n ƒë√£ h·∫øt l∆∞·ª£t m·ªü tr·ª©ng h√¥m nay! C√≤n l·∫°i: **${eggCheck.remaining}/${MAX_EGGS_PER_DAY}** l∆∞·ª£t.`, 
                    ephemeral: true 
                });
            }

            // Prompt c·∫£i ti·∫øn ƒë·ªÉ t·∫°o tr·ª©ng ƒëa d·∫°ng h∆°n
            // Thay th·∫ø prompt trong beginHatchingProcess method
const prompt = `
   B·∫°n l√† Ng∆∞·ªùi S√°ng T·∫°o Tr·ª©ng, b·∫≠c th·∫ßy t·∫°o ra tr·ª©ng th·∫ßn b√≠ t·ª´ m·ªçi n·ªÅn vƒÉn h√≥a v√† chi·ªÅu kh√¥ng gian.

## Quy t·∫Øc quan tr·ªçng v·ªÅ ƒê·ªò HI·∫æM & T√äN TR·ª®NG
- M·ªói qu·∫£ tr·ª©ng ph·∫£i c√≥ t√™n ph√π h·ª£p tuy·ªát ƒë·ªëi v·ªõi ƒë·ªô hi·∫øm:
  * Normal (50%): t√™n ƒë∆°n gi·∫£n, g·∫ßn g≈©i, t·ª± nhi√™n, KH√îNG ƒë∆∞·ª£c huy·ªÅn b√≠ hay ph√¥ tr∆∞∆°ng.
    - V√≠ d·ª• m·∫´u phong c√°ch: Tr·ª©ng R√™u Non, Tr·ª©ng C√° Ch√©p, Tr·ª©ng S·ªèi Tr·∫Øng.
  * Magic (30%): t√™n c√≥ ch√∫t huy·ªÅn ·∫£o, nh·∫π nh√†ng, kh√¥ng qu√° khoa tr∆∞∆°ng.
    - V√≠ d·ª• m·∫´u phong c√°ch: Tr·ª©ng √Ånh TrƒÉng, Tr·ª©ng Gi√≥ Th√¨ Th·∫ßm.
  * Rare (15%): t√™n ƒë·ªôc ƒë√°o, k·∫øt h·ª£p b·∫•t th∆∞·ªùng, t·∫°o s·ª± l·∫° l·∫´m nh∆∞ng kh√¥ng v∆∞·ª£t ng∆∞·ª°ng si√™u nhi√™n.
  * Unique (4%): t√™n k·ª≥ d·ªã, si√™u nhi√™n, v∆∞·ª£t kh·ªèi l·∫Ω th∆∞·ªùng.
  * Legend (1%): t√™n h√πng vƒ©, c·ªï x∆∞a ho·∫∑c mang t·∫ßm v≈© tr·ª• t·ªëi th∆∞·ª£ng.

‚ö†Ô∏è B·∫ÆT BU·ªòC: Kh√¥ng ƒë∆∞·ª£c d√πng sai phong c√°ch. V√≠ d·ª•: Normal kh√¥ng ƒë∆∞·ª£c d√πng t·ª´ v≈© tr·ª• hay si√™u nhi√™n.

## Ngu·ªìn c·∫£m h·ª©ng
- Normal/Magic: d√πng thi√™n nhi√™n, ƒë·ªông v·∫≠t, hi·ªán t∆∞·ª£ng th∆∞·ªùng ng√†y pha ch√∫t k·ª≥ ·∫£o.
- Rare/Unique/Legend: c√≥ th·ªÉ m·ªü r·ªông sang th·∫ßn tho·∫°i ƒê√¥ng - T√¢y, v≈© tr·ª•, c∆° gi·ªõi, chi·ªÅu kh√¥ng gian.

## M√¥ t·∫£
- M·ªói tr·ª©ng ph·∫£i m√¥ t·∫£ b·∫±ng √≠t nh·∫•t 3 gi√°c quan (m·∫Øt, tai, m≈©i, da, l∆∞·ª°i).
- Ng√¥n ng·ªØ ph·∫£i th∆° m·ªông, b√≠ ·∫©n, kh√¥ng kh√¥ c·ª©ng.
- Tr·ªôn y·∫øu t·ªë vƒÉn h√≥a + khoa h·ªçc vi·ªÖn t∆∞·ªüng.
- M·ªói qu·∫£ tr·ª©ng m√¥ t·∫£ ho√†n to√†n kh√°c phong c√°ch, kh√¥ng l·∫∑p l·∫°i.

## ƒê·∫ßu ra
- Tr·∫£ v·ªÅ JSON array g·ªìm 3 objects.
- M·ªói object:
  {
    "type": "T√™n tr·ª©ng (ph·∫£i kh·ªõp ƒë√∫ng ƒë·ªô hi·∫øm)",
    "description": "M√¥ t·∫£ chi ti·∫øt theo quy t·∫Øc tr√™n"
  }

## Ng·∫´u nhi√™n
- Lu√¥n sinh ra 3 tr·ª©ng kh√°c nhau v·ªõi ƒë·ªô hi·∫øm ng·∫´u nhi√™n theo t·ªâ l·ªá:
  * Normal 50%
  * Magic 30%
  * Rare 15%
  * Unique 4%
  * Legend 1%
- Kh√¥ng l·∫∑p l·∫°i t√™n ho·∫∑c m√¥ t·∫£ t·ª´ b·∫•t k·ª≥ k·∫øt qu·∫£ tr∆∞·ªõc ƒë√≥.
`;
            
            console.log(`[PetService] ƒêang g·ªçi AI ƒë·ªÉ t·∫°o 3 lo·∫°i tr·ª©ng...`);
            const response = await this.gptService.generatePKResponse(prompt);
            const eggs = JSON.parse(response);
            console.log(`[PetService] AI ƒë√£ tr·∫£ v·ªÅ ${eggs.length} lo·∫°i tr·ª©ng.`);

            const embed = new EmbedBuilder()
                .setTitle('ü•ö L·ªÖ Thi√™ng Ch·ªçn Tr·ª©ng')
                .setDescription(`C√≥ ba qu·∫£ tr·ª©ng th·∫ßn b√≠ hi·ªán ra tr∆∞·ªõc m·∫∑t b·∫°n, m·ªói qu·∫£ ƒë·ªÅu ch·ª©a ƒë·ª±ng m·ªôt linh h·ªìn c·ªï x∆∞a ƒëang ch·ªù ƒë∆∞·ª£c th·ª©c t·ªânh...\n\n**C√≤n l·∫°i: ${eggCheck.remaining}/${MAX_EGGS_PER_DAY} l∆∞·ª£t h√¥m nay**\n\nH√£y ch·ªçn m·ªôt qu·∫£ tr·ª©ng ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc h√†nh tr√¨nh c·ªßa b·∫°n!`)
                .setColor(0xFAEBD7);

            const buttons = eggs.map(egg => {
                embed.addFields({ name: `ü•ö ${egg.type}`, value: `*${egg.description}*` });
                return new ButtonBuilder()
                    .setCustomId(`select_egg_${egg.type.replace(/\s+/g, '_')}`)
                    .setLabel(`Ch·ªçn ${egg.type}`)
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('ü•ö');
            });

            const row = new ActionRowBuilder().addComponents(buttons);

            await interaction.editReply({ embeds: [embed], components: [row] });
            console.log(`[PetService] ƒê√£ g·ª≠i b·∫£ng ch·ªçn tr·ª©ng cho User ID: ${userId}`);

        } catch (error) {
            console.error(`[PetService][ERROR] L·ªói trong beginHatchingProcess cho User ID: ${userId}:`, error);
            await interaction.editReply("‚ùå Bot g·∫∑p l·ªói khi t·∫°o tr·ª©ng, vui l√≤ng th·ª≠ l·∫°i sau.");
        }
    }

    /**
     * X·ª≠ l√Ω vi·ªác n·ªü tr·ª©ng sau khi ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn
     */
   /**
 * X·ª≠ l√Ω vi·ªác n·ªü tr·ª©ng sau khi ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn
 */
async hatchEgg(interaction, eggType) {
    const userId = interaction.user.id;
    console.log(`[PetService] B·∫Øt ƒë·∫ßu n·ªü tr·ª©ng lo·∫°i "${eggType}" cho User ID: ${userId}`);

    try {
        // G·ª≠i message tr·ª©ng ƒëang n·ªü ngay l·∫≠p t·ª©c
        const hatchingEmbed = new EmbedBuilder()
            .setTitle('ü•ö Tr·ª©ng ƒêang N·ªü...')
            .setDescription('‚ú® C√≥ ƒëi·ªÅu g√¨ ƒë√≥ ƒëang x·∫£y ra b√™n trong qu·∫£ tr·ª©ng...\n‚è∞ Vui l√≤ng ch·ªù trong gi√¢y l√°t...')
            .setColor(0xFFD700);
        
        await interaction.update({ embeds: [hatchingEmbed], components: [] });

        // Th√™m delay ƒë·ªÉ t·∫°o c·∫£m gi√°c h·ªìi h·ªôp
        await new Promise(resolve => setTimeout(resolve, 3000));

        // Ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng pets
        const currentPets = await Pet.find({ ownerId: userId });
        if (currentPets.length >= MAX_PETS_PER_USER && !ADMIN_IDS.includes(userId)) {
            return interaction.editReply({ 
                embeds: [new EmbedBuilder()
                    .setTitle('‚ùå L·ªói')
                    .setDescription(`B·∫°n ƒë√£ c√≥ ƒë·ªß **${MAX_PETS_PER_USER} pets** r·ªìi!`)
                    .setColor(0xFF0000)
                ], 
                components: [] 
            });
        }

        console.log(`[PetService] ƒêang g·ªçi h√†m generatePetFromEgg v·ªõi lo·∫°i tr·ª©ng: ${eggType}`);
        const petData = await this.gptService.generatePetFromEgg(eggType);
        console.log(`[PetService] AI ƒë√£ t·∫°o xong d·ªØ li·ªáu pet cho User ID: ${userId}`, petData);

        const imagePrompt = `masterpiece, best quality, 4k, ultra-detailed, cinematic lighting, epic fantasy art, trending on artstation, a small adorable baby creature, ${petData.description_en_keywords}, species: ${petData.species}, element: ${petData.element}, rarity: ${petData.rarity}, isolated on a simple magical background`;
        console.log(`[PetService] Prompt t·∫°o ·∫£nh cho User ID: ${userId}: "${imagePrompt}"`);

        const imageResult = await this.imageService.generateImage(imagePrompt);
        if (!imageResult.success) {
            throw new Error(imageResult.error || "AI kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh cho pet.");
        }
        console.log(`[PetService] T·∫°o ·∫£nh th√†nh c√¥ng cho User ID: ${userId}`);

        const finalStats = {
            hp: petData.base_stats.hp, maxHp: petData.base_stats.hp,
            mp: petData.base_stats.mp, maxMp: petData.base_stats.mp,
            atk: petData.base_stats.atk, def: petData.base_stats.def,
            int: petData.base_stats.int, spd: petData.base_stats.spd,
        };

        // L∆∞u ·∫£nh v√†o database d∆∞·ªõi d·∫°ng base64 (n·∫øu c·∫ßn)
        const imageBase64 = imageResult.imageBuffer ? imageResult.imageBuffer.toString('base64') : null;

        const newPet = new Pet({
            ownerId: userId,
            name: petData.species,
            species: petData.species,
            description: petData.description_vi,
            rarity: petData.rarity,
            element: petData.element,
            stats: finalStats,
            skills: petData.skills, // ‚úÖ S·ª≠ d·ª•ng m·∫£ng skills t·ª´ AI
            traits: petData.traits, // ‚úÖ S·ª≠ d·ª•ng m·∫£ng traits t·ª´ AI
            imageBasePrompt: imagePrompt,
            imageData: imageBase64,
            expToNextLevel: 100
        });

        console.log(`[PetService] Chu·∫©n b·ªã l∆∞u pet m·ªõi v√†o DB cho User ID: ${userId}`);
        await newPet.save();
        console.log(`[PetService] ƒê√£ l∆∞u pet m·ªõi v√†o DB th√†nh c√¥ng cho User ID: ${userId}`);

        // C·∫≠p nh·∫≠t l∆∞·ª£t m·ªü tr·ª©ng
        await this.updateEggCooldown(userId);

        const rarityColors = { Normal: 0xAAAAAA, Magic: 0x00BFFF, Rare: 0xFFD700, Unique: 0x9400D3, Legend: 0xFF4500 };
        const embed = new EmbedBuilder()
            .setTitle(`üéâ CH√öC M·ª™NG! TH√ö C∆ØNG C·ª¶A B·∫°N ƒê√É N·ªû! üéâ`)
            .setDescription(`T·ª´ trong qu·∫£ tr·ª©ng **${eggType.replace(/_/g, ' ')}**, m·ªôt **${petData.species}** ƒë√£ ra ƒë·ªùi!`)
            .setColor(rarityColors[petData.rarity] || 0xFFFFFF)
            .addFields(
                { name: 'üåü T√™n', value: newPet.name, inline: true },
                { name: `‚ú® ƒê·ªô hi·∫øm`, value: newPet.rarity, inline: true},
                { name: `üíß H·ªá`, value: newPet.element, inline: true},
                { name: 'üìú M√¥ t·∫£', value: newPet.description }
            )
            .setImage('attachment://pet-image.png');

        // ‚úÖ Hi·ªÉn th·ªã t·∫•t c·∫£ skills (thay v√¨ ch·ªâ skills[0])
        if (newPet.skills && newPet.skills.length > 0) {
            newPet.skills.forEach((skill, index) => {
                embed.addFields({
                    name: `üí• K·ªπ nƒÉng ${index + 1}: ${skill.name}`,
                    value: `*${skill.description}* (Cost: ${skill.cost} MP, Type: ${skill.type})`
                });
            });
        }

        // ‚úÖ Hi·ªÉn th·ªã t·∫•t c·∫£ traits (thay v√¨ ch·ªâ traits[0])
        if (newPet.traits && newPet.traits.length > 0) {
            newPet.traits.forEach((trait, index) => {
                embed.addFields({
                    name: `üí° N·ªôi t·∫°i ${index + 1}: ${trait.name}`,
                    value: `*${trait.description}*`
                });
            });
        }

        embed.setFooter({ text: `D√πng /pet list ƒë·ªÉ xem t·∫•t c·∫£ pets c·ªßa b·∫°n!` });

        await interaction.editReply({ 
            content: `<@${userId}>`,
            embeds: [embed], 
            files: [{ attachment: imageResult.imageBuffer, name: 'pet-image.png' }]
        });
        console.log(`[PetService] ƒê√£ g·ª≠i th√¥ng b√°o pet n·ªü th√†nh c√¥ng cho User ID: ${userId}`);

    } catch (error) {
        console.error(`[PetService][CRITICAL ERROR] L·ªói trong qu√° tr√¨nh hatchEgg cho User ID: ${userId}:`, error);
        const errorEmbed = new EmbedBuilder()
            .setTitle('‚ùå L·ªói')
            .setDescription(`Bot g·∫∑p l·ªói trong qu√° tr√¨nh n·ªü tr·ª©ng: ${error.message}`)
            .setColor(0xFF0000);
            
        await interaction.editReply({ embeds: [errorEmbed] });
    }
}
    /**
     * Hi·ªÉn th·ªã danh s√°ch pets c·ªßa user
     */
    // Alternative: Button-based pet list (thay th·∫ø trong PetService)

/**
 * Hi·ªÉn th·ªã danh s√°ch pets c·ªßa user b·∫±ng buttons
 */
async showPetList(interaction) {
    const userId = interaction.user.id;
    console.log(`[PetService] Hi·ªÉn th·ªã danh s√°ch pets cho User ID: ${userId}`);

    try {
        const pets = await Pet.find({ ownerId: userId });
        console.log(`[PetService] T√¨m th·∫•y ${pets?.length || 0} pets cho User ID: ${userId}`);
        
        if (!pets || pets.length === 0) {
            return interaction.editReply({ 
                content: `‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o. D√πng \`/pet start\` ƒë·ªÉ b·∫Øt ƒë·∫ßu!`, 
                ephemeral: true 
            });
        }

        const embed = new EmbedBuilder()
            .setTitle(`üìã Danh S√°ch Pets c·ªßa ${interaction.user.displayName}`)
            .setDescription(`T·ªïng c·ªông: **${pets.length}/${MAX_PETS_PER_USER}** pets\n\nCh·ªçn pet b·∫°n mu·ªën xem chi ti·∫øt:`)
            .setColor(0x3498DB);

        // Hi·ªÉn th·ªã danh s√°ch pets trong embed
        pets.forEach((pet, index) => {
            const rarityEmoji = this.getRarityEmoji(pet.rarity);
            embed.addFields({
                name: `${rarityEmoji} ${pet.name} (Level ${pet.level})`,
                value: `${pet.rarity} - ${pet.element} - HP: ${pet.stats.hp}/${pet.stats.maxHp}`,
                inline: true
            });
        });

        // T·∫°o buttons cho pets (t·ªëi ƒëa 5 buttons per row, max 5 rows = 25 pets)
        const rows = [];
        const petsPerRow = 3;
        
        for (let i = 0; i < pets.length; i += petsPerRow) {
            const rowPets = pets.slice(i, i + petsPerRow);
            const buttons = rowPets.map((pet, index) => {
                const globalIndex = i + index;
                return new ButtonBuilder()
                    .setCustomId(`view_pet_${pet._id}`)
                    .setLabel(`${globalIndex + 1}. ${pet.name}`)
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji(this.getRarityEmoji(pet.rarity));
            });
            
            rows.push(new ActionRowBuilder().addComponents(buttons));
            
            // Discord gi·ªõi h·∫°n 5 rows
            if (rows.length >= 5) break;
        }

        await interaction.editReply({ 
            embeds: [embed], 
            components: rows 
        });
        console.log(`[PetService] ƒê√£ g·ª≠i danh s√°ch pets th√†nh c√¥ng cho User ID: ${userId}`);

    } catch (error) {
        console.error(`[PetService][ERROR] L·ªói trong showPetList cho User ID: ${userId}:`, error);
        console.error(`[PetService][ERROR] Stack trace:`, error.stack);
        
        try {
            await interaction.editReply({
                content: "‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch pets c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.",
                components: []
            });
        } catch (replyError) {
            console.error(`[PetService][ERROR] Kh√¥ng th·ªÉ g·ª≠i error message:`, replyError);
        }
    }
}

/**
 * Hi·ªÉn th·ªã menu ƒë·ªÉ ch·ªçn pet c·∫ßn th·∫£ b·∫±ng buttons
 */
async showReleasePetMenu(interaction) {
    const userId = interaction.user.id;
    console.log(`[PetService] Hi·ªÉn th·ªã menu th·∫£ pet cho User ID: ${userId}`);

    try {
        const pets = await Pet.find({ ownerId: userId });
        if (!pets || pets.length === 0) {
            return interaction.editReply({ 
                content: `‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o ƒë·ªÉ th·∫£.`, 
                ephemeral: true 
            });
        }

        const embed = new EmbedBuilder()
            .setTitle(`üïäÔ∏è Ch·ªçn Pet ƒê·ªÉ Th·∫£`)
            .setDescription(`Ch·ªçn pet b·∫°n mu·ªën th·∫£ v·ªÅ t·ª± nhi√™n. **H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!**`)
            .setColor(0xFF6B6B);

        // Hi·ªÉn th·ªã danh s√°ch pets trong embed
        pets.forEach((pet, index) => {
            const rarityEmoji = this.getRarityEmoji(pet.rarity);
            embed.addFields({
                name: `${rarityEmoji} ${pet.name} (Level ${pet.level})`,
                value: `${pet.rarity} - ${pet.element}`,
                inline: true
            });
        });

        // T·∫°o buttons ƒë·ªÉ th·∫£ pets
        const rows = [];
        const petsPerRow = 3;
        
        for (let i = 0; i < pets.length; i += petsPerRow) {
            const rowPets = pets.slice(i, i + petsPerRow);
            const buttons = rowPets.map((pet, index) => {
                const globalIndex = i + index;
                return new ButtonBuilder()
                    .setCustomId(`release_pet_${pet._id}`)
                    .setLabel(`${globalIndex + 1}. Th·∫£ ${pet.name}`)
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üïäÔ∏è');
            });
            
            rows.push(new ActionRowBuilder().addComponents(buttons));
            if (rows.length >= 5) break;
        }

        await interaction.editReply({ embeds: [embed], components: rows });

    } catch (error) {
        console.error(`[PetService][ERROR] L·ªói trong showReleasePetMenu:`, error);
        await interaction.editReply("‚ùå C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã menu th·∫£ pet.");
    }
}

    /**
     * Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa m·ªôt pet c·ª• th·ªÉ
     */
   /**
 * Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa m·ªôt pet c·ª• th·ªÉ
 */
async showSinglePetStatus(interaction, petId) {
    try {
        console.log(`[DEBUG] showSinglePetStatus called with petId: ${petId}`);
        
        // Validate ObjectId format
        if (!mongoose.Types.ObjectId.isValid(petId)) {
            console.error(`[DEBUG] Invalid petId format: ${petId}`);
            return interaction.editReply({ 
                content: '‚ùå ID pet kh√¥ng h·ª£p l·ªá!', 
                ephemeral: true 
            });
        }
        
        const pet = await Pet.findById(petId);
        console.log(`[DEBUG] Pet found:`, pet ? `${pet.name} (${pet._id})` : 'null');
        
        if (!pet || pet.ownerId !== interaction.user.id) {
            console.log(`[DEBUG] Pet not found or wrong owner. Pet ownerId: ${pet?.ownerId}, User ID: ${interaction.user.id}`);
            return interaction.editReply({ 
                content: '‚ùå Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng n√†y!', 
                ephemeral: true 
            });
        }

        console.log(`[DEBUG] Creating status embed for pet: ${pet.name}`);
        
        const rarityColors = { Normal: 0xAAAAAA, Magic: 0x00BFFF, Rare: 0xFFD700, Unique: 0x9400D3, Legend: 0xFF4500 };
        const embed = new EmbedBuilder()
            .setColor(rarityColors[pet.rarity] || 0x3498DB)
            .setTitle(`üìú B·∫¢NG TR·∫†NG TH√ÅI - ${pet.name}`)
            .setDescription(`*${pet.description}*`)
            .addFields(
                { name: 'üåü Lo√†i', value: `**${pet.species}**`, inline: true },
                { name: 'üîÆ ƒê·ªô hi·∫øm', value: `**${pet.rarity}**`, inline: true },
                { name: '‚ö° Nguy√™n t·ªë', value: `**${pet.element}**`, inline: true },
                { name: 'üìä C·∫•p ƒë·ªô', value: `**${pet.level}**`, inline: true },
                { name: 'üéØ Kinh nghi·ªám', value: `\`${pet.exp} / ${pet.expToNextLevel}\``, inline: true },
                { name: 'üèÜ Giai ƒëo·∫°n ti·∫øn h√≥a', value: `**${pet.evolutionStage}**`, inline: true }
            )
            .addFields(
                { name: '‚ù§Ô∏è HP', value: `\`${pet.stats.hp} / ${pet.stats.maxHp}\``, inline: true },
                { name: 'üíô MP', value: `\`${pet.stats.mp} / ${pet.stats.maxMp}\``, inline: true },
                { name: '‚ö° Stamina', value: `\`${pet.status.stamina} / ${pet.status.maxStamina}\``, inline: true },
                { name: '‚öîÔ∏è T·∫•n c√¥ng', value: `\`${pet.stats.atk}\``, inline: true },
                { name: 'üõ°Ô∏è Ph√≤ng th·ªß', value: `\`${pet.stats.def}\``, inline: true },
                { name: 'üß† Tr√≠ tu·ªá', value: `\`${pet.stats.int}\``, inline: true },
                { name: 'üí® T·ªëc ƒë·ªô', value: `\`${pet.stats.spd}\``, inline: true },
                { name: 'üçé ƒê·ªô ƒë√≥i', value: `\`${pet.status.hunger}/100\``, inline: true },
                { name: 'üìÖ Ng√†y t·∫°o', value: `\`${pet.createdAt.toLocaleDateString('vi-VN')}\``, inline: true }
            );

        // Handle image loading
        let imageBuffer = null;
        if (pet.imageData) {
            try {
                imageBuffer = Buffer.from(pet.imageData, 'base64');
                embed.setThumbnail('attachment://pet-image.png');
                console.log(`[DEBUG] Loaded image from DB for pet: ${pet.name}`);
            } catch (imageError) {
                console.warn(`[DEBUG] Failed to load image from DB:`, imageError);
            }
        }

        // Regenerate image if needed
        if (!imageBuffer && pet.imageBasePrompt) {
            console.log(`[DEBUG] Regenerating image for pet: ${pet.name}`);
            try {
                const imageResult = await this.imageService.generateImage(pet.imageBasePrompt);
                if (imageResult.success) {
                    imageBuffer = imageResult.imageBuffer;
                    embed.setThumbnail('attachment://pet-image.png');
                    
                    // Save new image to DB
                    try {
                        pet.imageData = imageBuffer.toString('base64');
                        await pet.save();
                        console.log(`[DEBUG] Saved new image to DB for pet: ${pet.name}`);
                    } catch (saveError) {
                        console.warn(`[DEBUG] Failed to save image to DB:`, saveError);
                    }
                }
            } catch (imageGenError) {
                console.warn(`[DEBUG] Failed to regenerate image:`, imageGenError);
            }
        }

        // ‚úÖ Add all skills (properly handle array)
        if (pet.skills && pet.skills.length > 0) {
            pet.skills.forEach((skill, index) => {
                embed.addFields({ 
                    name: `üí• K·ªπ nƒÉng ${index + 1}: ${skill.name}`, 
                    value: `*${skill.description}*\nüîπ **Type**: ${skill.type} | **Cost**: ${skill.cost} MP | **Power**: ${skill.power}`
                });
            });
        } else {
            embed.addFields({ 
                name: `üí• K·ªπ nƒÉng`, 
                value: `*Ch∆∞a c√≥ k·ªπ nƒÉng n√†o*`
            });
        }
        
        // ‚úÖ Add all traits (properly handle array)
        if (pet.traits && pet.traits.length > 0) {
            pet.traits.forEach((trait, index) => {
                embed.addFields({ 
                    name: `üí° N·ªôi t·∫°i ${index + 1}: ${trait.name}`, 
                    value: `*${trait.description}*`
                });
            });
        } else {
            embed.addFields({ 
                name: `üí° N·ªôi t·∫°i`, 
                value: `*Ch∆∞a c√≥ n·ªôi t·∫°i n√†o*`
            });
        }
        
        console.log(`[DEBUG] Sending status reply for pet: ${pet.name}`);
        
        await interaction.editReply({ 
            embeds: [embed],
            files: imageBuffer ? [{ attachment: imageBuffer, name: 'pet-image.png' }] : [],
            components: []
        });
        
        console.log(`[DEBUG] Successfully sent status for pet: ${pet.name}`);

    } catch (error) {
        console.error(`[DEBUG] Error in showSinglePetStatus:`, error);
        console.error(`[DEBUG] Error stack:`, error.stack);
        
        try {
            await interaction.editReply({
                content: `‚ùå C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã th√¥ng tin pet: ${error.message}`,
                components: []
            });
        } catch (replyError) {
            console.error(`[DEBUG] Failed to send error reply:`, replyError);
        }
    }
}

    /**
     * X√°c nh·∫≠n th·∫£ pet
     */
    async confirmReleasePet(interaction, petId) {
        try {
            const pet = await Pet.findById(petId);
            if (!pet || pet.ownerId !== interaction.user.id) {
                return interaction.editReply({ 
                    content: '‚ùå Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng n√†y!', 
                    ephemeral: true 
                });
            }

            const embed = new EmbedBuilder()
                .setTitle(`üïäÔ∏è X√°c Nh·∫≠n Th·∫£ ${pet.name}`)
                .setDescription(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th·∫£ **${pet.name}** (${pet.rarity} - ${pet.element}) v·ªÅ t·ª± nhi√™n?\n\n‚ö†Ô∏è **H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!**`)
                .setColor(0xFF6B6B);

            const confirmButton = new ButtonBuilder()
                .setCustomId(`confirm_release_${petId}`)
                .setLabel('X√°c Nh·∫≠n Th·∫£')
                .setStyle(ButtonStyle.Danger)
                .setEmoji('üïäÔ∏è');

            const cancelButton = new ButtonBuilder()
                .setCustomId('cancel_release')
                .setLabel('H·ªßy')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚ùå');

            const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

            await interaction.editReply({ embeds: [embed], components: [row] });

        } catch (error) {
            console.error(`[PetService][ERROR] L·ªói trong confirmReleasePet:`, error);
            await interaction.editReply("‚ùå C√≥ l·ªói x·∫£y ra.");
        }
    }

    /**
     * Th·ª±c hi·ªán th·∫£ pet
     */
    async releasePet(interaction, petId) {
        try {
            const pet = await Pet.findById(petId);
            if (!pet || pet.ownerId !== interaction.user.id) {
                return interaction.editReply({ 
                    content: '‚ùå Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng n√†y!', 
                    ephemeral: true 
                });
            }

            await Pet.findByIdAndDelete(petId);

            const embed = new EmbedBuilder()
                .setTitle(`üïäÔ∏è ${pet.name} ƒê√£ ƒê∆∞·ª£c Th·∫£`)
                .setDescription(`**${pet.name}** ƒë√£ ƒë∆∞·ª£c th·∫£ v·ªÅ t·ª± nhi√™n v√† s·∫Ω s·ªëng h·∫°nh ph√∫c ·ªü ƒë√≥.\n\nC·∫£m ∆°n b·∫°n ƒë√£ chƒÉm s√≥c ${pet.name}! üíö`)
                .setColor(0x2ECC71);

            await interaction.editReply({ embeds: [embed], components: [] });

        } catch (error) {
            console.error(`[PetService][ERROR] L·ªói trong releasePet:`, error);
            await interaction.editReply("‚ùå C√≥ l·ªói x·∫£y ra khi th·∫£ pet.");
        }
    }

    /**
     * X·ª≠ l√Ω khi user ch·ªçn pet t·ª´ select menu
     */
    async handlePetListSelection(interaction, action, petId) {
        if (action === 'status') {
            await interaction.deferUpdate();
            await this.showSinglePetStatus(interaction, petId);
        } else if (action === 'release') {
            await interaction.deferUpdate();
            await this.confirmReleasePet(interaction, petId);
        }
    }

    /**
     * L·∫•y emoji t∆∞∆°ng ·ª©ng v·ªõi ƒë·ªô hi·∫øm
     */
    getRarityEmoji(rarity) {
        const emojiMap = {
            'Normal': '‚ö™',
            'Magic': 'üîµ', 
            'Rare': 'üü°',
            'Unique': 'üü£',
            'Legend': 'üî¥'
        };
        return emojiMap[rarity] || '‚ö™';
    }
}

module.exports = PetService;