// src/services/petService.js

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const GptChatService = require('./gptChatService');
const Pet = require('../model/petSchema');
const ImageGenerationService = require('./imageGenerationService');
const ADMIN_IDS = ['448507913879945216']; // Add this line
// Kh·ªüi t·∫°o c√°c service m·ªôt l·∫ßn ·ªü ngo√†i class ƒë·ªÉ t√°i s·ª≠ d·ª•ng
// ƒê√∫ng theo c√°ch b·∫°n ƒë√£ l√†m trong interactionHandler.js

class PetService {
    constructor() {
        
      
        this.gptService = GptChatService; // S·ª≠ d·ª•ng instance ƒë√£ c√≥
        this.imageService = new ImageGenerationService()
        this.imageGenService = new ImageGenerationService();

        this.DEFAULT_QUESTION_TIME_LIMIT_MS = 15 * 1000; // M·∫∑c ƒë·ªãnh 15 gi√¢y
    }

    /**
     * B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch·ªçn tr·ª©ng cho ng∆∞·ªùi ch∆°i.
     * @param {import('discord.js').Interaction} interaction 
     */
    async beginHatchingProcess(interaction) {
        const userId = interaction.user.id;
        console.log(`[PetService] B·∫Øt ƒë·∫ßu quy tr√¨nh ch·ªçn tr·ª©ng cho User ID: ${userId}`);

        try {
            const existingPet = await Pet.findOne({ ownerId: userId });
            if (existingPet && !ADMIN_IDS.includes(userId)) {
                console.log(`[PetService] User ID: ${userId} ƒë√£ c√≥ pet. Ng·ª´ng quy tr√¨nh.`);
                return interaction.editReply({ content: `‚ùå B·∫°n ƒë√£ c√≥ m·ªôt th√∫ c∆∞ng t√™n l√† **${existingPet.name}** r·ªìi!`, ephemeral: true });
            }

            const prompt = `T·∫°o 3 lo·∫°i tr·ª©ng gi·∫£ t∆∞·ªüng ri√™ng bi·ªát cho m·ªôt game nu√¥i pet. V·ªõi m·ªói qu·∫£ tr·ª©ng, h√£y cung c·∫•p m·ªôt 'type' (v√≠ d·ª•: 'Tr·ª©ng N√∫i L·ª≠a', 'Tr·ª©ng ƒê·∫°i D∆∞∆°ng', 'Tr·ª©ng V·ª±c S√¢u') v√† m·ªôt m√¥ t·∫£ ng·∫Øn, b√≠ ·∫©n ch·ªâ trong m·ªôt c√¢u. Tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng m·ªôt m·∫£ng JSON h·ª£p l·ªá c·ªßa c√°c ƒë·ªëi t∆∞·ª£ng, m·ªói ƒë·ªëi t∆∞·ª£ng c√≥ hai kh√≥a l√† 'type' v√† 'description'.`;
            
            console.log(`[PetService] ƒêang g·ªçi AI ƒë·ªÉ t·∫°o 3 lo·∫°i tr·ª©ng...`);
            const response = await this.gptService.generatePKResponse(prompt); // D√πng h√†m generatePKResponse v·∫´n ·ªïn cho t√°c v·ª• ƒë∆°n gi·∫£n n√†y
            const eggs = JSON.parse(response);
            console.log(`[PetService] AI ƒë√£ tr·∫£ v·ªÅ ${eggs.length} lo·∫°i tr·ª©ng.`);

            const embed = new EmbedBuilder()
                .setTitle('ü•ö L·ªÖ Ch·ªçn Tr·ª©ng')
                .setDescription('M·ªôt s·ª©c m·∫°nh c·ªï x∆∞a ƒë√£ ban cho b·∫°n ba qu·∫£ tr·ª©ng b√≠ ·∫©n. Linh h·ªìn c·ªßa m·ªôt ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh ƒëang ch·ªù ƒë·ª£i b√™n trong.\n\nH√£y ch·ªçn m·ªôt qu·∫£ tr·ª©ng ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc h√†nh tr√¨nh c·ªßa b·∫°n!')
                .setColor(0xFAEBD7);

            const buttons = eggs.map(egg => {
                embed.addFields({ name: `ü•ö ${egg.type}`, value: `*${egg.description}*` });
                return new ButtonBuilder()
                    .setCustomId(`select_egg_${egg.type.replace(/\s+/g, '_')}`)
                    .setLabel(`Ch·ªçn ${egg.type}`)
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('ü•ö');
            });

            const row = new ActionRowBuilder().addComponents(buttons);

            await interaction.editReply({ embeds: [embed], components: [row] });
            console.log(`[PetService] ƒê√£ g·ª≠i b·∫£ng ch·ªçn tr·ª©ng cho User ID: ${userId}`);

        } catch (error) {
            console.error(`[PetService][ERROR] L·ªói trong beginHatchingProcess cho User ID: ${userId}:`, error);
            await interaction.editReply("‚ùå Bot g·∫∑p l·ªói khi t·∫°o tr·ª©ng, vui l√≤ng th·ª≠ l·∫°i sau.");
        }
    }

    /**
     * X·ª≠ l√Ω vi·ªác n·ªü tr·ª©ng sau khi ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn.
     * @param {import('discord.js').Interaction} interaction 
     * @param {string} eggType Lo·∫°i tr·ª©ng ƒë√£ ch·ªçn.
     */
    async hatchEgg(interaction, eggType) {
        const userId = interaction.user.id;
        console.log(`[PetService] B·∫Øt ƒë·∫ßu n·ªü tr·ª©ng lo·∫°i "${eggType}" cho User ID: ${userId}`);

        try {
            await interaction.message.delete();

            console.log(`[PetService] ƒêang g·ªçi h√†m generatePetFromEgg v·ªõi lo·∫°i tr·ª©ng: ${eggType}`);

            
            const petData = await this.gptService.generatePetFromEgg(eggType);
            console.log(`[PetService] AI ƒë√£ t·∫°o xong d·ªØ li·ªáu pet cho User ID: ${userId}`, petData);

            const imagePrompt = `masterpiece, best quality, 4k, ultra-detailed, cinematic lighting, epic fantasy art, trending on artstation, a small adorable baby creature, ${petData.description_en_keywords}, species: ${petData.species}, element: ${petData.element}, rarity: ${petData.rarity}, isolated on a simple magical background`;
            console.log(`[PetService] Prompt t·∫°o ·∫£nh cho User ID: ${userId}: "${imagePrompt}"`);

            const imageResult = await this.imageService.generateImage(imagePrompt);
            if (!imageResult.success) {
                // N√©m ra l·ªói ƒë·ªÉ catch block x·ª≠ l√Ω
                throw new Error(imageResult.error || "AI kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh cho pet.");
            }
            console.log(`[PetService] T·∫°o ·∫£nh th√†nh c√¥ng cho User ID: ${userId}`);

            const finalStats = {
                hp: petData.base_stats.hp, maxHp: petData.base_stats.hp,
                mp: petData.base_stats.mp, maxMp: petData.base_stats.mp,
                atk: petData.base_stats.atk, def: petData.base_stats.def,
                int: petData.base_stats.int, spd: petData.base_stats.spd,
            };

            const newPet = new Pet({
                ownerId: userId,
                name: petData.species,
                species: petData.species,
                description: petData.description_vi,
                rarity: petData.rarity,
                element: petData.element,
                stats: finalStats,
                skills: [petData.skill],
                traits: [petData.trait],
                imageBasePrompt: imagePrompt,
                expToNextLevel: 100
            });

            console.log(`[PetService] Chu·∫©n b·ªã l∆∞u pet m·ªõi v√†o DB cho User ID: ${userId}`);
            await newPet.save();
            console.log(`[PetService] ƒê√£ l∆∞u pet m·ªõi v√†o DB th√†nh c√¥ng cho User ID: ${userId}`);

            const rarityColors = { Normal: 0xAAAAAA, Magic: 0x00BFFF, Rare: 0xFFD700, Unique: 0x9400D3, Legend: 0xFF4500 };
            const embed = new EmbedBuilder()
                .setTitle(`üéâ CH√öC M·ª™NG! TH√ö C∆ØNG C·ª¶A B·∫†N ƒê√É N·ªû! üéâ`)
                .setDescription(`T·ª´ trong qu·∫£ tr·ª©ng **${eggType.replace(/_/g, ' ')}**, m·ªôt **${petData.species}** ƒë√£ ra ƒë·ªùi!`)
                .setColor(rarityColors[petData.rarity] || 0xFFFFFF)
                .addFields(
                    { name: 'üåü T√™n', value: newPet.name, inline: true },
                    { name: `‚ú® ƒê·ªô hi·∫øm`, value: newPet.rarity, inline: true},
                    { name: `üíß H·ªá`, value: newPet.element, inline: true},
                    { name: 'üìú M√¥ t·∫£', value: newPet.description },
                    { name: `üí• K·ªπ nƒÉng: ${newPet.skills[0].name}`, value: newPet.skills[0].description },
                    { name: `üí° N·ªôi t·∫°i: ${newPet.traits[0].name}`, value: newPet.traits[0].description }
                )
                .setImage('attachment://pet-image.png')
                .setFooter({ text: `H√£y d√πng /pet status ƒë·ªÉ xem chi ti·∫øt nh√©!` });

                await interaction.editReply({ 
                    content: '',
                    embeds: [embed], 
                    files: [{ attachment: imageResult.imageBuffer, name: 'pet-image.png' }] 
                });
            console.log(`[PetService] ƒê√£ g·ª≠i th√¥ng b√°o pet n·ªü th√†nh c√¥ng cho User ID: ${userId}`);

        } catch (error) {
            console.error(`[PetService][CRITICAL ERROR] L·ªói trong qu√° tr√¨nh hatchEgg cho User ID: ${userId}:`, error);
            await interaction.editReply(`‚ùå Bot g·∫∑p l·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh n·ªü tr·ª©ng. L·ªói: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i sau.`);
        }
    }

    /**
     * Hi·ªÉn th·ªã b·∫£ng tr·∫°ng th√°i chi ti·∫øt c·ªßa pet.
     * @param {import('discord.js').Interaction} interaction 
     */
    async showPetStatus(interaction) {
        const userId = interaction.user.id;
        console.log(`[PetService] B·∫Øt ƒë·∫ßu l·∫•y tr·∫°ng th√°i pet cho User ID: ${userId}`);

        try {
            const pet = await Pet.findOne({ ownerId: userId });
            if (!pet) {
                console.log(`[PetService] Kh√¥ng t√¨m th·∫•y pet cho User ID: ${userId}.`);
                return interaction.editReply({ content: `‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng. D√πng \`/pet start\` ƒë·ªÉ b·∫Øt ƒë·∫ßu!`, ephemeral: true });
            }
            console.log(`[PetService] ƒê√£ t√¨m th·∫•y pet "${pet.name}" cho User ID: ${userId}.`);

            console.log(`[PetService] ƒêang t√°i t·∫°o ·∫£nh cho pet "${pet.name}"...`);
            const imageResult = await this.imageService.generateImage(pet.imageBasePrompt);
            if (!imageResult.success) {
                console.warn(`[PetService] T√°i t·∫°o ·∫£nh th·∫•t b·∫°i cho pet "${pet.name}", s·∫Ω hi·ªÉn th·ªã status kh√¥ng c√≥ ·∫£nh.`);
            } else {
                console.log(`[PetService] T√°i t·∫°o ·∫£nh th√†nh c√¥ng cho pet "${pet.name}".`);
            }

            const rarityColors = { Normal: 0xAAAAAA, Magic: 0x00BFFF, Rare: 0xFFD700, Unique: 0x9400D3, Legend: 0xFF4500 };
            const embed = new EmbedBuilder()
                .setColor(rarityColors[pet.rarity] || 0x3498DB)
                .setTitle(`üìú B·∫¢NG TR·∫†NG TH√ÅI - ${pet.name}`)
                .setDescription(`*${pet.description}*`)
                .addFields(
                    { name: 'C·∫•p ƒë·ªô', value: `**${pet.level}**`, inline: true },
                    { name: 'Kinh nghi·ªám', value: `\`${pet.exp} / ${pet.expToNextLevel}\``, inline: true },
                    { name: 'ƒê·ªô hi·∫øm', value: `**${pet.rarity}**`, inline: true },
                    { name: 'HP', value: `‚ù§Ô∏è \`${pet.stats.hp} / ${pet.stats.maxHp}\``, inline: true },
                    { name: 'MP', value: `üíô \`${pet.stats.mp} / ${pet.stats.maxMp}\``, inline: true },
                    { name: 'Stamina', value: `‚ö° \`${pet.status.stamina} / ${pet.status.maxStamina}\``, inline: true },
                    { name: 'T·∫•n c√¥ng', value: `‚öîÔ∏è \`${pet.stats.atk}\``, inline: true },
                    { name: 'Ph√≤ng th·ªß', value: `üõ°Ô∏è \`${pet.stats.def}\``, inline: true },
                    { name: 'T·ªëc ƒë·ªô', value: `üí® \`${pet.stats.spd}\``, inline: true }
                );
            
            if (imageResult.success) {
                embed.setThumbnail('attachment://pet-image.png');
            }

            pet.skills.forEach(s => embed.addFields({ name: `üí• K·ªπ nƒÉng: ${s.name}`, value: `*${s.description}* (Cost: ${s.cost} MP)`}));
            pet.traits.forEach(t => embed.addFields({ name: `üí° N·ªôi t·∫°i: ${t.name}`, value: `*${t.description}*`}));
            
            await interaction.editReply({ 
                embeds: [embed],
                files: imageResult.success ? [{ attachment: imageResult.imageBuffer, name: 'pet-image.png' }] : []
            });
            console.log(`[PetService] ƒê√£ g·ª≠i b·∫£ng tr·∫°ng th√°i th√†nh c√¥ng cho User ID: ${userId}`);

        } catch (error) {
            console.error(`[PetService][ERROR] L·ªói trong showPetStatus cho User ID: ${userId}:`, error);
            await interaction.editReply("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin pet c·ªßa b·∫°n.");
        }
    }
}

module.exports = PetService;