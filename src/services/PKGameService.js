// pkGameService.js
const GptChatService = require('./gptChatService');

class PKGameService {
    constructor() {
        this.gameSession = null;
        this.gptChatService = GptChatService;
    }

    isGameActive() {
        return this.gameSession !== null && this.gameSession.status !== "ended";
    }

    startNewGame() {
        if (this.isGameActive()) {
            return { success: false, message: "‚ùå Hi·ªán ƒëang c√≥ m·ªôt tr·∫≠n ƒë·∫•u PK ƒëang di·ªÖn ra. Vui l√≤ng ƒë·ª£i!" };
        }
        this.gameSession = {
            players: [],
            status: "waiting", // "waiting", "in-progress", "ended"
            turn: 0,
            log: []
        };
        return { success: true, message: "M·ªôt tr·∫≠n ƒë·∫•u PK m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o! Hai ng∆∞·ªùi ch∆°i d√πng `!joinPK` ƒë·ªÉ tham gia." };
    }

    joinGame(player) {
        if (!this.gameSession || this.gameSession.status !== "waiting") {
            return { success: false, message: "‚ùå Kh√¥ng c√≥ tr·∫≠n ƒë·∫•u n√†o ƒëang ch·ªù ho·∫∑c ƒë√£ qu√° 2 ng∆∞·ªùi r·ªìi." };
        }
        if (this.gameSession.players.length >= 2) {
            return { success: false, message: "‚ùå ƒê√£ c√≥ ƒë·ªß 2 ng∆∞·ªùi ch∆°i r·ªìi." };
        }
        if (this.gameSession.players.some(p => p.id === player.id)) {
            return { success: false, message: "‚ùå B·∫°n ƒë√£ tham gia r·ªìi." };
        }

        const newPlayer = {
            id: player.id,
            name: player.globalName || player.username,
            hp: 100,
            maxHp: 100
        };
        this.gameSession.players.push(newPlayer);

        if (this.gameSession.players.length === 2) {
            this.gameSession.status = "in-progress";
                this.gameSession.turn = Math.floor(Math.random() * 2);
            const player1 = this.gameSession.players[0];
            const player2 = this.gameSession.players[1];
            return { success: true, message: `Tr·∫≠n ƒë·∫•u b·∫Øt ƒë·∫ßu gi·ªØa ${player1.name} v√† ${player2.name}! L∆∞·ª£t c·ªßa **${this.gameSession.players[this.gameSession.turn].name}**.` };
        }
        return { success: true, message: `${player.globalName || player.username} ƒë√£ tham gia tr·∫≠n ƒë·∫•u! C·∫ßn th√™m ${2 - this.gameSession.players.length} ng∆∞·ªùi n·ªØa.` };
    }

    async processTurn(player, audioAttachment) {
        console.log("audioAttachment",audioAttachment)
        if (!this.isGameActive()) {
            return { success: false, message: "‚ùå Kh√¥ng c√≥ tr·∫≠n ƒë·∫•u n√†o ƒëang di·ªÖn ra." };
        }

        const currentPlayerTurn = this.gameSession.players[this.gameSession.turn];
        if (player.id !== currentPlayerTurn.id) {
            return { success: false, message: `‚ùå Ch∆∞a ƒë·∫øn l∆∞·ª£t c·ªßa b·∫°n, ${player.globalName || player.username}. L∆∞·ª£t c·ªßa **${currentPlayerTurn.name}**.` };
        }

        const opponentPlayer = this.gameSession.players[(this.gameSession.turn + 1) % 2];
        
        try {
            const audioTranscript = await this.gptChatService.AudioToTextAI(audioAttachment.url);
            console.log("audioTranscript", audioTranscript);
            
            const gamePrompt = `
            B·ªëi c·∫£nh: Tr·∫≠n ƒë·∫•u PK gi·ªØa ${currentPlayerTurn.name} (HP: ${currentPlayerTurn.hp}/${currentPlayerTurn.maxHp}) v√† ${opponentPlayer.name} (HP: ${opponentPlayer.hp}/${opponentPlayer.maxHp}).
            L∆∞·ª£t c·ªßa ${currentPlayerTurn.name}.
            H√†nh ƒë·ªông c·ªßa ${currentPlayerTurn.name} (ph√¢n t√≠ch t·ª´ file audio): "${audioTranscript}".
            H√£y t·∫°o m·ªôt k·ªãch b·∫£n sinh ƒë·ªông m√¥ t·∫£ h√†nh ƒë·ªông n√†y, t√≠nh to√°n s√°t th∆∞∆°ng h·ª£p l√Ω (v√≠ d·ª•: 10-30 HP) v√† m√¥ t·∫£ ph·∫£n ·ª©ng c·ªßa ƒë·ªëi th·ªß.
            K·∫øt qu·∫£ ph·∫£i tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng JSON:
            {
                "description": "M√¥ t·∫£ sinh ƒë·ªông v·ªÅ ƒë√≤n ƒë√°nh.",
                "damage": "S·ªë s√°t th∆∞∆°ng g√¢y ra."
            }`;
            
            const aiResponse = await this.gptChatService.generatePKResponse(gamePrompt);
            const result = JSON.parse(aiResponse);
            
            const damage = parseInt(result.damage);
            if (isNaN(damage)) {
                 throw new Error("AI response did not contain a valid damage number.");
            }
            
            opponentPlayer.hp -= damage;
            if (opponentPlayer.hp < 0) opponentPlayer.hp = 0;

            this.gameSession.log.push(result.description);
            
            this.gameSession.turn = (this.gameSession.turn + 1) % 2;
            
            const turnMessage = `
            **--- L∆∞·ª£t ƒë·∫•u ---**
            ${result.description}
            ${currentPlayerTurn.name}: ${currentPlayerTurn.hp}/${currentPlayerTurn.maxHp} HP
            ${opponentPlayer.name}: ${opponentPlayer.hp}/${opponentPlayer.maxHp} HP
            ---
            L∆∞·ª£t ti·∫øp theo l√† c·ªßa **${this.gameSession.players[this.gameSession.turn].name}**.`;

            if (opponentPlayer.hp <= 0) {
                // S·ª≠a l·ªói: return k·∫øt qu·∫£ c·ªßa endGame
                return this.endGame(currentPlayerTurn, opponentPlayer, turnMessage);
            }

            return { success: true, message: turnMessage };

        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω l∆∞·ª£t ch∆°i PK:', error);
            // S·ª≠a l·ªói: return k·∫øt qu·∫£ c·ªßa endGame n·∫øu c√≥ l·ªói
            return this.endGame(null, null, null);
        }
    }
    
    endGame(winner, loser, finalTurnMessage) {
        if (!this.gameSession) return { success: false, message: "Kh√¥ng c√≥ tr·∫≠n ƒë·∫•u n√†o ƒëang di·ªÖn ra." };
        
        this.gameSession.status = "ended";
        
        let finalMessage = "üéâ **Tr·∫≠n ƒë·∫•u PK ƒë√£ k·∫øt th√∫c!**\n";
        finalMessage += finalTurnMessage ? finalTurnMessage + '\n' : '';

        if (winner && loser) {
            finalMessage += `Ch√∫c m·ª´ng **${winner.name}** ƒë√£ ƒë√°nh b·∫°i **${loser.name}**!`;
        } else if (!winner && !loser && !finalTurnMessage) {
            finalMessage = "Tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c do l·ªói kh√¥ng mong mu·ªën.";
        }
        
        this.gameSession = null; 
        
        return { success: true, message: finalMessage };
    }
}

module.exports = new PKGameService();